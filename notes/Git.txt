cloner un repository :
git clone <path_to_file>
remplacer path to file avec "clone by ssh" de gitlab

avoir des infos sur le master actuel :
git rev-parse --show-toplevel

ajouter un fichier à la branche actuelle (doit être accompagné de commit pour enregistrer les changements) :
to add a file/folder to the index / stage a file/folder (must be commited)
git add <path/to/file>
pour tout ajouter :
git add *

to remove a file/folder from the index / unstage a file/folder (file is not deleted locally, must still be commited):
git rm --cached <nom_fichier>

to move a staged file/folder in the index (file is moved locally, must still be commited):
git mv <file_name> <file_destination>
=> fixes renaming on Windows

enregistrer les changements dans la branche actuelle :
git commit -m "message du commit"

mettre à jour le repo local (récupérer les changements du repo distant) :
git fetch (--all)
git pull (--all)
git pull origin master
git pull <REMOTE> <name_of_branch>

mettre à jour le repo distant sur gitlab :
git push origin master
git push <REMOTE> <name_of_branch>

mettre à jour la branche actuelle sur le repo distant :
git push origin HEAD

avoir des infos sur la branche actuelle :
git status

pour savoir si on est à jour avec le repo distant :
git fetch --all
git fetch origin

connaître le nom d'utilisateur et l'email configurés :
git config --list

faire du dossier actuel un repo git :
git init

checkout specific item from specific commit:
git checkout <commit#> <item_path>

obtenir la liste de toutes les branches (locales et distantes) :
git branch -a

ajouter une nouvelle branche en local :
git branch <nom_nouvelle_branche>
git checkout -b <nom_nouvelle_branche>

ajouter une branche locale sur le repo distant :
git push origin <nom_branche>
avec tracking (connexion active entre les branches locales et distantes) :
git push -u origin <nom_branche>

supprimer une branche en local :
git branch -d <nom_branche>
git branch -D <nom_branche> (== git branch -df <nom_branche>)

supprimer une branche sur le repo distant :
git push origin --delete <nom_branche>

changer de branche :
git switch <nom_branche>
git checkout <nom_branche>

pour appliquer les changements de la branche parent sur une branche enfant :
git checkout <branche_enfant>
git rebase <branche_parent>

pour appliquer les changements d'une branche enfant sur sa branche parent :
git checkout <branche_parent>
git merge <branche_enfant>

hide current working directory differences from the index (hidden commit):
git stash
retrieve working directory differences (reapply hidden commit):
git stash pop

appliquer un commit spécifique sur une branche :
git checkout <nom_branch>
git cherry-pick <commit_hash_from_log>

git diff: (the stage is considered a commit for git diff)
- git diff
shows the diff between the modified files (not staged) and the latest commit (HEAD)
- git diff --staged
shows the diff between the stage and the latest commit (HEAD)
- git diff origin/HEAD
shows the diff between my branch and the online branch (all files, all commits)
- git diff --cached origin/HEAD
shows the diff between the commits of HEAD (stage included) and the online branch (all files, all commits)
- git diff <file_path>
shows the modifications made to a specific file since the last commit
